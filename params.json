{
  "name": "Matrix",
  "tagline": "Simple matrix tests",
  "body": "========================================================================<br>\r\n    CONSOLE APPLICATION : Matrix Project Overview<br>\r\n========================================================================<br>\r\n<br>\r\nRunning a couple of tests on Systematic solution of linear equations.<br>\r\n<br>\r\nCompleted Procedures<br>\r\n1) Gaussian Elimination<br>\r\n2) Gauss-Jordan Elimination<br>\r\n3) Determinant of a triangular matrix<br>\r\n4) Solve lower triangular system (back substitution)<br>\r\n5) Solve upper triangular system (back substitution)<br>\r\n6) LU Decomposition Doolittle<br>\r\n7) LU Decomposition Crout<br>\r\n8) Solve LU system (gemeric)<br>\r\n9) LU Decomposition Cholesky<br>\r\n10) Gauss-Siedel iteration<br>\r\n11) Householder tridiagonalization<br>\r\n<br>\r\n<br>\r\nhad problems with the process of constructing a Hessenburg matrix for the general case<br>\r\nof an n*n square matrix because I thought the Householder algorithm only worked for <br>\r\nsymmetric matrices. <br>\r\n<br>\r\nI implemented a method that performs a similarity transform and returns<br>\r\nH and S from http://www.mymathlib.com/matrices/eigen/, <br>\r\n(these are removed, I used the Krezig method, see much older versions)<br>\r\n<br>\r\nI found a paper<br>\r\nhttp://www.ams.org/journals/mcom/1969-23-108/S0025-5718-1969-0258255-3/S0025-5718-1969-0258255-3.pdf\r\nthat proves numerical instability of the row reduction methods.(this showed up again in the complex matrix).\r\n<br><br>\r\nAnyway I discovered that the Householder method can be used to transform a general N*N matrix<br>\r\ninto the Hessenburg form ... The matrix in the example is from this page <br>\r\nhttp://mathfaculty.fullerton.edu/mathews/n2003/hessenberg/HessenbergMod/Links/HessenbergMod_lnk_9.html<br>\r\nand for more information<br>\r\nhttp://mathfaculty.fullerton.edu/mathews/n2003/HessenbergMod.html<br>\r\n<br>\r\n<br>\r\n12) implemented QR algorithm for finding real eigen-values. <br>\r\n13) the QR procedure is working well for real valued solutions and especially symmetric matrices<br>\r\n14) the QR procedure solved for the complex number pairs<br>\r\n15) There are now constructors for various static initializer types<br> \r\n(see examples at top for information, the max is a 6x6 matrix)<br>\r\n16) memory optimized for real matrices<br>\r\n17) Implemented a Complex matrix type - still experimental<br> \r\n18) Set up matrix inversion using LU decomposition thanks to <br>\r\nhttp://mathworld.wolfram.com/MatrixInverse.html<br>\r\nand <br>\r\nhttp://www.gamedev.net/page/resources/_/technical/math-and-physics/matrix-inversion-using-lu-decomposition-r3637<br>\r\nfor completely explaining it<br>\r\n19) Added some functions for finding a determinant up to 5x5 however the input function isn't implemented.<br>\r\n20) Added method for newton iteration to improve bad inverses.<br>\r\n21) first complex matrix version of the householder algorithm is implemented<br>\r\n22) implemented QR factorisation and tested here - the output produces the same R matrix<br>\r\n23) Reduction to Hessenburg is *exactly* the same as the python version, the solution was to use CSGN instead of SGN<br> \r\n24) Eigenvalues for the Hermitian matrix are *exactly* the same as the python version<br> \r\n25) Eigenvalues for general complex matrix are working (recognizing the fact that the Hermitian is its own conjugate transpose)\r\n    \r\n<img src=\"Untitled.jpg\"></img><br>\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}